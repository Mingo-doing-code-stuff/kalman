# Modellparameter
F = 1.0  # Zustandsübergangsmatrix (in diesem einfachen Fall)
H = 1.0  # Messmatrix (in diesem einfachen Fall)
Q = 1.0  # Prozessgeräusch-Kovarianz (Systemunsicherheit)
R = 2.0  # Messgeräusch-Kovarianz (Messunsicherheit)

# Initialisierung
x = 0.0  # Zustandsvektor (geschätzter Zustand)
P = 1.0  # Kovarianzmatrix (Unsicherheit der Schätzung)

# Funktion zur Kalman-Schätzung


def kalman_filter(new_measurement):
    global x, P
    # Vorhersage
    x_predicted = F * x  # Vorhergesagter Zustand
    P_predicted = F * P * F + Q  # Vorhergesagte Kovarianz

    # Kalman-Gewichtungsfaktor
    K = P_predicted * H / (H * P_predicted * H + R)

    # Korrektur
    x = x_predicted + K * (new_measurement - H * x_predicted)
    P = (1 - K * H) * P_predicted

    # Rückgabe der geschätzten Messung
    return x


# Array für die Messwerte
sensor_data = []

# Simulierte Messungen hinzufügen
measurements = [22.95,
                22.97,
                22.97,
                22.84,
                22.86,
                22.95,
                22.95,
                22.84,
                23.28,
                22.95,
                23.38,
                22.81,
                23.33,
                23.38,
                22.91,
                22.81,
                22.97,
                22.98,
                22.97,
                22.86,
                22.97,
                22.97,
                22.97,
                22.86,
                22.97,
                22.97,
                22.97,
                22.86,
                22.97,
                22.97,
                22.93,
                22.86,
                22.91,
                23.34,
                22.98,
                22.86,
                22.97,
                22.97,
                22.88,
                22.86,
                22.97,
                22.97,
                22.86,
                22.86,
                22.97,
                22.97,
                22.86,
                22.86,
                23.38,
                22.97,
                23.28,
                22.95,
                22.95,
                22.97,
                22.84,
                22.95,
                22.97,
                22.97,
                22.84,
                23.33,
                22.95,
                22.95,
                22.84,
                22.95,
                22.95,
                22.97,
                22.84,
                22.93,
                22.97,
                22.97,
                22.84,
                22.97,
                22.97,
                22.95,
                22.84,
                22.95,
                22.97,
                22.97,
                22.84,
                22.97,
                22.97,
                22.97,
                22.86,
                22.97,
                22.97,
                22.84,
                22.84,
                23.40,
                22.97,
                22.86,
                22.84,
                22.95,
                22.95,
                22.84,
                22.84,
                22.95,
                22.95,
                22.84,
                22.84,
                22.95,
                22.95,
                22.84,
                22.84,
                22.95,
                22.95,
                22.84,
                22.84,
                22.95,
                22.95,
                22.84,
                22.84,
                22.97,
                22.97,
                22.86,
                22.97,
                22.97,
                22.97,
                22.86,
                23.40,
                22.93,
                22.98,
                22.86,
                22.98,
                22.97,
                22.98,
                22.86,
                22.97,
                22.97,
                22.98,
                22.84,
                22.95,
                22.97,
                22.97,
                22.86,
                22.95,
                22.95,
                22.97,
                22.84,
                22.95,
                22.97,
                22.95,
                22.84,
                22.95,
                22.95,
                22.97,
                22.86,
                22.95,
                23.38,
                22.95,
                22.81,
                22.95,
                22.97,
                22.95,
                22.81,
                22.95,
                22.95,
                22.86,
                22.84,
                22.95,
                22.95,
                22.84,
                22.86,
                22.95,
                23.41,
                22.84,
                22.84,
                22.95,
                22.95,
                22.84,
                22.86,
                22.95,
                23.00,
                22.88,
                22.90,
                23.00,
                23.00,
                23.29,
                22.95,
                22.97,
                22.95,
                23.31,
                22.95,
                22.97,
                22.95,
                23.26,
                22.97,
                23.41,
                22.95,
                22.84,
                23.00,
                23.36,
                22.95,
                22.84,
                22.95,
                22.95,
                22.95,
                22.84,
                22.95,
                22.95,
                22.97,
                22.84,
                22.95,
                22.97,
                ]

for measurement in measurements:
    # Kalman-Filter anwenden
    estimated_value = kalman_filter(new_measurement=measurement)

    # Geschätzten Wert ins Array hinzufügen
    sensor_data.append(estimated_value)

# Ausgabe der geschätzten Werte
print("Original Werte:   {}".format(measurements))
print("Geschätzte Werte: {}".format(sensor_data))
